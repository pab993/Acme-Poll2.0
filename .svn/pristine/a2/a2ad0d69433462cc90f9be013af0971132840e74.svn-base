
package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;

import repositories.ActorRepository;
import security.LoginService;
import security.UserAccount;
import domain.Actor;
import forms.ActorForm;

@Service
@Transactional
public class ActorService {

	//Managed Repository =============================================================================

	@Autowired
	private ActorRepository	actorRepository;


	//Constructor methods ============================================================================

	//Simple CRUD methods ============================================================================

	public Actor findOne(int actorId) {
		Assert.notNull(actorId);
		Actor actor = actorRepository.findOne(actorId);
		return actor;

	}

	public Collection<Actor> findAll() {
		Collection<Actor> actors = actorRepository.findAll();
		return actors;
	}

	public Actor save(Actor actor) {
		Assert.notNull(actor);
		Assert.notNull(actor.getUserAccount());
		Actor result;

		Actor principal = findByPrincipal();
		Assert.notNull(principal);

		result = actorRepository.save(actor);

		return result;
	}

	//Other Business Methods =========================================================================

	public Actor findByPrincipal() {
		Actor result;
		UserAccount userAccount;

		try {
			userAccount = LoginService.getPrincipal();
			result = this.findByUserAccount(userAccount);
		} catch (Throwable exc) {
			result = null;
		}

		return result;
	}

	public Actor findByUserAccount(final UserAccount userAccount) {
		Assert.notNull(userAccount);
		Actor result;

		result = this.actorRepository.findByUserAccountId(userAccount.getId());

		return result;
	}

	public ActorForm reconstructToForm(Actor actor) {
		ActorForm actorForm = new ActorForm();

		actorForm.setName(actor.getName());
		actorForm.setSurname(actor.getSurname());
		actorForm.setPhoneNumber(actor.getPhoneNumber());
		actorForm.setEmail(actor.getEmail());
		actorForm.setPostalAddress(actor.getPostalAddress());

		return actorForm;

	}

	public Actor reconstruct1(ActorForm actorForm, BindingResult binding) {
		Actor result;

		result = findByPrincipal();

		comprobarPhoneNumber(actorForm.getPhoneNumber(), binding);

		return result;
	}

	//Hay dos reconstructs porque por alguna razón aquí se guardan los cambios en la base de datos en este metodo. Así que de esta manera hago un "rollback".
	public Actor reconstruct2(ActorForm actorForm, BindingResult binding) {
		Actor result;

		result = findByPrincipal();
		result.setName(actorForm.getName());
		result.setSurname(actorForm.getSurname());
		result.setPhoneNumber(actorForm.getPhoneNumber());
		result.setEmail(actorForm.getEmail());
		result.setPostalAddress(actorForm.getPostalAddress());

		comprobarPhoneNumber(actorForm.getPhoneNumber(), binding);

		return result;
	}

	private boolean comprobarPhoneNumber(String phoneNumber, BindingResult binding) {
		FieldError error;
		String[] codigos;
		boolean result;

		if (phoneNumber == null || phoneNumber.isEmpty()) {
			result = true;
		} else {
			result = false;
		}

		if (!result) {
			if (phoneNumber.matches("^[+][a-zA-Z]{2}([(][0-9]{1,3}[)])?[0-9]{4,25}$") || phoneNumber.matches("^[0-9]{4,25}$")) {
				result = true;
			} else {
				codigos = new String[1];
				codigos[0] = "actor.phoneNumber.error";
				error = new FieldError("actorForm", "phoneNumber", phoneNumber, false, codigos, null, "");
				binding.addError(error);
			}
		}

		return result;
	}

	public boolean isAuthenticated() {
		try {
			Assert.notNull(LoginService.getPrincipal());
		} catch (final Exception e) {
			return false;
		}

		return true;
	}

	public void checkActorIsAuthenticated() {
		Assert.notNull(LoginService.getPrincipal());
	}
}
